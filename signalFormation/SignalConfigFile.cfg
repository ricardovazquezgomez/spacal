#########################################################
# S I G N A L   F O R M A T I O N   C O N F I G F I L E # 
#########################################################
#
# Loris Martinazzoli        l.martinazzoli@cern.ch 
# Apr 2020
###

#####################
### G E N E R A L ###
#####################
randomSeed      = -1                     # if = -1 is initialised randomly by the program
multiThread     = -1                    # Suggested number of threads. If < 0, no multithreading
                                        #       If == 0, EnableImplicitMT() without arguments (automatic number of threads), else suggests a number of threads
verbosity       = 1                     # if 0 print less stuff
nDetectors      = 18                    # How many detectors?

doAllPulses     = 1                     # if yes, it will build pulses for all the intermediate steps
                                        #       that is, energy deposition - scintillation - transport
                                        #       Of ourse, computationally more expensive.

###########################
### I N P U T   R O O T ###
###########################
TTreeName       = hybrid                # Name of the TTree inside the input file

nameEv          = event                 # Name of the event branch in the TTree
nameX           = x             
nameY           = y
nameZ           = z
nameDetSim      = detector              # Name of the branch containing the cell number
nameModSim      = module                # Name of the branch containing the module number
nameModType     = moduleType            # Name of the branch containing the module type
nameEnergy      = PhotonEnergy
nameTime        = timestamp             # Name of the branch containing the total time delay of each photon

nameTimeDepo    = t_deposition          # Name of the branch containing the time delay due to energy deposition
nameTimeGen     = t_generation          # Name of the branch containing the time delay due to scintillation
nameTimeProp    = t_propagation         # Name of the branch containing the time delay due to photon transport



#####################
### F I L T E R S ###
#####################
SEGraphName     = SpatialEfficiencyGraph
BordersName     = Borders

UnifLossFac     = 1                 # A loss factor due to the light guides. *TEMPORARY SOLUTION*



#############################
### O U T P U T   R O O T ###
#############################
OutTreeName     = tree                      # Name of the output TTree
OutPhotName     = ph                        # Name of the output detected photons branches
OutWaveName     = pulse                     # Name of the output waveforms branches
OutModName      = mod                       # Prefix of the modules branches

OutWaveNDepo    = pulse_deposition          # Name of the output waveforms branches - Delay due to energy deposition
OutWaveNScint   = pulse_depoAndScint        # Name of the output waveforms branches - Delay due to energy deposition and scintillation
OutWaveNDepoTran= pulse_depoAndTrans        # Name of the output waveforms branches - Delay due to energy deposition and photon transport

saveFiltered    = 0                         # If yes, it will take a snapshot of the dataframe after the filters have been applied
saveInfo        = 1                         # If yes, save Detector's QE and SPR as TGraph in the output .root file
saveFirstTSs    = 1                         # If yes, save the first numOfTss photons' timestamps for each event in the central detectors
numOfTSs        = 100                       # If saveFirstTss, save the following first photons' timestamps


#############
### P M T ###
#############
PhD_Type        = Hama_R7899                # Hamamatsu R7899-20
# PhD_Type        = Hama_R7600U_20            # Hamamatsu R7600U-20 MCD-PMT (2020)
# PhD_Type        = Hama_maPMT                # Hamamatsu H13543 multi anode PMT
# PhD_Type        = Ideal                     # Ideal readout, ultrafast, perfect efficiency and 0 SPTR.  *Under Testing*
# PhD_Type        = SiPM                      # *Work in progress* FBK RGB-HD 



### Facultative parameters given in input to the program to modify the default values of the PMTs. Ignored if <0
SPTR            = -1                        # SPTR;         
QE_ScaleFactor  = -1                        # Scaling factor of the QE;   
Gain            = 40000.                    # PMT Gain;                  


#########################
### D I G I T I Z E R ###
#########################
### PARTLY SHARED BETWEEN simReadout.cpp AND ApplyCFD.cpp.
### To ensure a correct conversion between time and digitizer's clock units.
###  
gate            = 204.800                   # [ns] Digitizer time gate for each event
sampling        = 1024                      # Binning of the gate
delay           = 40.                       # [ns] Constant Delay applied to each timestamp, simulates cables, etc...
baseline        = 0.                        # Pulse baseline value
sigmaNoise      = 0.0041564792              # [V] Sigma of the electronic noise over the baseline   -  DRS4 -> 1.7 ADC ch. If 12 Bit, 1V...


#############
### C F D ###
#############
### Related to the CFD computation program. It will use the same configfile as simReadout
### I/O
inTreeName      = tree                      # Name of the input TTree
OutTreeNameCFD  = tree                      # Name of the output TTree of the CFD program
OutTimeStamp    = t                         # Prefix of the branches of timestamps
skimPulses      = 1                         # If yes, drop the branches containing the pulses (save disk space)

### Fit
baseLineSamples = 50                        # Samples to calculate mean and sigma of the pulse baseline
timesBase       = 10                        # How many sigmas to set the start of the pulse.
fitSamplesNum   = 3                         # How many points are used to do the fit.
zeroTrigger     = 0                         # Everything before this bin is ignored, in sampling units.

### CFD
PulseSign       = -1                        # Pulse polarity. If working with a positive polarity, it should be changed to +1.
peakFraction    = 0.3                       # Fraction of the pulse peak which the thresold is set at.

### Data
convert_to_ns   = 1                         # Multiply the timestamp in digitizer's clock units by a timeBinCFD conversion factor

### Check
savePulse       = 0                         # Event ID of the pulse to be saved in the output file. if <0, no pulse will be saved
drawTimestamp   = 1                         # If yes, draws a vertical lines at the timestamp value.