########################################
# Configuration file
# version 02/06/2020
# Marco Pizzichemi - marco.pizzichemi@cern.ch
########################################

### remember that in general you can start a single, local, simulation from command line in 3 ways
# Syntax for exec with gps: FibresCalo <configuration file> <output file without extention> <gps file>
# Syntax for exec: FibresCalo <configuration file> <output file>
# Syntax for viz: FibresCalo <configuration file>

### read carefully the sections below to understand how to use the simulation package


#####################
# THIS CONFIG DESCRIPTION
#####################
# this configuration file will produce a full LHCb ECAL
# As explained in readme, in case of a full ECAL simulation, the main config file (this one)
# is read but only the general information used. All the info from "SPACAL MODULE" section on
# is ignores, because this info will be taken from the configuration files listed in modules_config.

# The ECAL is divided in 6 romboidal regions (see section CALORIMETER)
# Regions are defined with the help of CAD obj files
# The position of individual modules inside the regions is fetched from ecal_map_file
# This config file then points to other config files, one per region
# Any valid config file can be used.
# in this example

# 1) the innermost region is based on SPACAL modules
# Each module has a Tungsten absorber, split in 2 along the longitudinal z direction, in 2 sections 4+10 cm long.
# Sections are separated by a specular reflector (ESR), defined on the surface of a 1 mm thick aluminum separation foil.
# Each section is divided in 8x8 cells, each cell made by 9x9 GAGG crystals, each crystal 1x1 cm^2 section (and 4 or 10 cm long)
# Pitch among crystals is 1.6 mm on both x and y directions (transverse) directions. This makes each cell 14.4 mm size
# The air gap around each crystal is 50 microns. Crystal surfaces are defined are "realistically polished" (i.e. they have a slight amount of depolishing)

# 2) the other regions are based on SPACAL modules similar to innermost region, but with:
# - Pb absorber
# - Cell size is 28.8 mm (so 18x18 crystals), to match the Moliere radius of about 3 cm



#####################
# GENERAL
#####################
### general configuration keys
# seed                  seed for random generator. if not given, default to -1, which means the seed is computed randomly
# checkOverlaps         ask Geant4 to check if there are overlapping volumes   - default = False
# B_field_intensity     intensity of magnetic field, in Tesla - default = 0
# defaultCut            production cut value in mm (if not given, default to 0.025 mm)
seed = -1
checkOverlaps = False
B_field_intensity = 0
defaultCut = 0.025


#####################
# SOURCE
#####################
# source can be defined by a single particle generator, with a gps file,
# or by a ROOT file containing the a LHCb multi particle flux
# choice between the two possibilities is made by the key useGPS (if false, multi particle flux used)
# IMPORTANT - when using the multi particle flux, it is better to set calorimeter_position = 1 (see below)
useGPS      = false
#input_file  = ./FluxGammaFromB2KstGamma_Run1000Evt1000_10K.root     # ROOT file with flux                - ignored if useGPS = true
input_file  = ./FluxGammaB2KstGamma_MB_Merged.root     # ROOT file with flux                - ignored if useGPS = true
input_tree  = tree                                  # mane of ROOT TTree in input_file   - ignored if useGPS = true
skipEvents  = 0        # 0 #start from event skipEvents in the tree            - ignored if useGPS = true
deltaZ      = -12765.6  ### actual range: 12600 - 12629                         - ignored if useGPS = true


#####################
# GPS files
#####################
### in general, GPS files are passed directly by command line, using the "exec with gps" mode, so this key can be omitted
### some example are in the gps folder
### gps_instructions_file             gps macro file. this will be ignored if the program is run in "exec with gps" mode (see above)
gps_instructions_file = gps_electron.mac


#####################
### SIMULATION TYPE
#####################
## key to set type of simulation.
## 4 types are defined, and if chosen will overwrite the "output group" keys you can find below
## and also "primaries" and "opticalMaterial" keys. If this key is not given instead, the
## simulation type is considered "free" and the keys in OUTPUT section, as well as "primaries"
# and "opticalMaterial" keys can be set freely by the user.
## The simulation types are:
## 0) only energy deposition
## 1) full ray tracing
## 2) hybrid simulation
## 3) optical calibration
simulationType = 2


#####################
# OUTPUT
#####################
## keys to control output. if none is specified, and simulation type is "free", everything will be saved!
switchOnScintillation  = 0
propagateScintillation = 0
switchOnCerenkov       = 0
propagateCerenkov      = 0
saveAll                = 0
saveTree               = 0
saveShower             = 1
savePrimaries          = 1
savePhotons            = 0
savePhotonAbsPoint     = 0
saveStructure          = 1
saveSummary            = 0
saveSimple             = 0
savePhotonGen          = 0
saveEnergyPerModule    = 0


########################
# PRIMARIES
########################
## primaries               number of primary particles shot for each /run/beamOn 1
primaries              = 1


########################
# OPTICAL PHOTONS RUN
########################
## opticalMaterial            special key for optical calibration. ignored if primary in gps is not opticalPhoton. Set to 0 if you want an instantaneous monocromatic emission, with energy decided by gps. Leave commented you want the optical emission to depend of the material where the point of emission is.
# opticalMaterial = 0     # 0 = instantaneous monocromatic, with energy decided by gps. otherwise same as cell_crystal_material. ignored if primary in gps is not opticalPhoton


################################################
# PHOTON LOGGING                                #
################################################
## keys to control at which position the optical photons are killed and recorded as "detected"
## Photons are considered detected if they enter the logging_volume
## and optionally the user can also impose that they have to be entering it coming from pre_volume
logging_volume         = Gap_Abs_Interface
#pre_volume             = crystal


#####################
# VISUALIZATION
#####################
# visualize or not the individual elements in viz mode. 1 = true, 0 = false
worldVisibility       = 1         # default = 0
caloVisibility        = 1         # default = 0
moduleVisibility      = 1         # default = 0
holeVisibility        = 0         # default = 1
crystalsVisibility    = 0         # default = 1
interfaceVisibility   = 0         # default = 1
gapsVisibility        = 0         # default = 1
readoutVisibility     = 0         # default = 1
absorberVisibility    = 0         # default = 0
containerVisibility   = 0         # default = 1
esrVisibility         = 0         # default = 1
lgVisibility          = 0         # default = 1
# wire frame or solid Visualization 1 = wireFrame, 0 = solid
wireFrame = 1


#####################
### SIM GEOMETRY
#####################
# simulation "rotation axis" is z, section is x-y.
# dimensions are defined by the elements in the simulation
world_material = 1     # world material: 1) Air
# general dimension of air gaps, whenever two surfaces are touching in dry contact
gap_size = 0.01 # in mm


#######################
# CALORIMETER
#######################

### CALORIMETER CONSTRUCTION METHODS
# There are 2 ways to form a calorimeter:
# 1. With one or more modules OF THE SAME TYPES, placed in a X*Y matrix
#    (eventually with a hole for beam pipe)
# 2. With one or more modules OF DIFFERENT TYPES, placed in free xy positions
#    according to a ROOT file map, found in ecal_map_file in the TH2F ecal_map_histo
#    Note that the ecal_map_file will be ignored if the simulation is not using this method
# The choice among the two methods is done here. If the key module_config is left commented
# the simulation will build only one type of module on the basis of THIS config file
# If the key is used, the modules will be built on the basis of the config files listed
#
# list of configuration files, one per region
# ATTENTION: you need to provied full path for each file, if the files are not in the same
# folder from which the simulation is launched!
# each file is separated by a | delimiter
#modules_config   = |spacal_Pb_gagg_12x12cm.cfg|spacal_Pb_gagg_12x12cm.cfg|spacal_Pb_gagg_12x12cm.cfg|spacal_Pb_gagg_12x12cm.cfg|spacal_Pb_gagg_12x12cm.cfg|spacal_W_gagg_12x12cm.cfg|
# list of module types corresponding to regions above
#ecal_type        = |1|2|3|4|5|6|
# list of CAD drawing files for the regions above
#container_volume = |vol_1.obj|vol_2.obj|vol_3.obj|vol_4.obj|vol_5.obj|vol_6.obj|
# ROOT file with x-y position of modules and types
#ecal_map_file  = ECAL_LS4_option1.root
# name of TH2F histogram in ecal_map_file
#ecal_map_histo = histo_ls4_option1
ecal_map_file        = ECAL_LS4_option1.root
ecal_map_histo       = histo_ls4_option1
modules_config       = |spacal_Pb_Polystirene_pitch1.67_12x12cm.cfg|spacal_W_gagg_pitch1.67_12x12cm.cfg|
ecal_type            = |5|6|
container_volume     = |vol_5.obj|vol_6.obj|


### CALORIMETER METHOD 1
# The calorimeter is made of an array of identical modules. The array is in x-y,
# no space between modules. The calorimeter xyz dimensions is AUTOMATICALLY computed
modules_nx = 1
modules_ny = 1
# modules in the center of the calorimeter can be removed, leaving a hole for the beam pipe
# the size of the hole is specified in terms of number of missing modules, in x and y
# using the keys pipe_modules_nx and pipe_modules_ny
# ATTENTION: for each direction, the number of modules minus the number of pipe modules HAS to be even!
# pipe_modules_nx = 5
# pipe_modules_ny = 3

### CALORIMETER METHOD 2
# The calorimeter can made of 1 or more types of modules.
# Their position is specified in a ROOT file
# The calorimeter dimensions MUST BE SPECIFIED by the user with
# the appropriate keys. all dimensions are in mm
# All these keys will be ignored if the key modules_config is left commented out
calorimeter_size_x = 8000.
calorimeter_size_y = 8000.
calorimeter_size_z = 400.


#####################
### SPACAL MODULE
#####################
# Each module is made by 5 Volumes:
# 1x Absorber
# 2x Interfaces
# 2x Readouts
# They are place like this
#
#   |         |           |          |           |         |
#   | READOUT | INTERFACE | ABSORBER | INTERFACE | READOUT |
#   |         |           |          |           |         |
# -----------------------------------------------------------------> z
#
# The x-y dimensions of the Absorber volume force the dimensions of the other volumes, so
# only z dimension needs to be defined for them

## INTERFACE
# these are the volumes between the absorber and the photo-detectors
# z length for both interfaces
interface_length = 0.1 # in mm
# By default, two volumes are created. They are the two gaps between this volume and the two
# adjacent ones. Material and thickness are decided here
# 0 = air 1 = glue
gap_abs_interface_material = 0
gap_interface_readout_material = 0

# IMPORTANT: the rest of the interface definition is left INTENTIONALLY hardcoded in the
# simulation. This is because the optcal readout is very peculiar for each configuration
# and cannot be generalized in a template file. The default interface structure, i.e. the
# plexiglass cones, is defined in src/DetectorConstruction.cc, inside function
# DetectorConstruction::ConstructLightGuides. The user will have to implement a different
# optical readout if it is needed. Clearly, there is no need to do so if the user
# is not going to use optical photons. Also, if the user wants to use optical photons, it
# is advised to do so in hybrid simulation modality. So the simulation will take care of what
# happens to thte photons until they exit from the crystals, and the impact of the light guides
# and pmts will not matter. The user can still include them in the simulation, because they
# could have an impact on the incident beam

## READOUT
# these are the volumes of the photodetectors. Just like for interfaces, these are left
# INTENTIONALLY hardcoded. See above.
readout_length = 50 # in mm

## ABSORBER
# The absorber volume. these options are self explanatory
absorber_name     = abs_one
absorber_size_x   = 120.
absorber_size_y   = 120.
absorber_size_z   = 140.
absorber_pos_x    = 0.
absorber_pos_y    = 0.
absorber_pos_z    = 0.
# absorber material: 1) Brass 2) Tungsten alloy 3) Lead 4) Iron 5) Aluminium 6) CopperTungstenAlloy 7) Pure Tungsten, 18.5 g/cm3 8)  Pure Tungsten, 19.1 g/cm3 9) Air Killer 10) Air
absorber_material = 8
# reflectivity of the absorber
absorber_specular_lobe  = 0.1
absorber_specular_spike = 0.9
absorber_backscatter    = 0
absorber_reflectivity   = 0.5
absorber_sigma_alpha    = 0.1
# W_fraction = 0.722    # fraction of Tungsten in the alloy (only for option 6)

## CELLS
# Each absorber is divided in 1 or more cells. A cell is defined as a collection
# of holes in the asborber, fille with an homogeneous type of crystals. Clearly,
# an absober can be made by a single cell with all the crystals. But in reality,
# we will study absorbers that are at least split in two parts along z, and furtermore
# for test beams we will study absorbers made of different crystals. This option leaves
# freedom to the user, but the dimensions have to be properly defined!
# The various cells are described by each entry in a list of values. each list needs to be
# of the same length!!!

#   2  5  8       11  14  17
#   1  4  7       10  13  16
#   0  3  6       9   12  15

cell_name     = |0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|
cell_pos_x    = |-15.3|-15.3|-15.3|0|0|0|15.3|15.3|15.3|-15.3|-15.3|-15.3|0|0|0|15.3|15.3|15.3|
cell_pos_y    = |-15.3|0|15.3|-15.3|0|15.3|-15.3|0|15.3|-15.3|0|15.3|-15.3|0|15.3|-15.3|0|15.3|
cell_pos_z    = |-50|-50|-50|-50|-50|-50|-50|-50|-50|20|20|20|20|20|20|20|20|20|
# inside each cell, holes (filled with crystals) are arranged in a x-y array
# hole+crystal is an element
cell_x_elements = |9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|
cell_y_elements = |9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|9|

# dimensions etc for the crystals inside the holes
cell_crystal_size_x = |1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|
cell_crystal_size_y = |1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|1.|
cell_crystal_size_z = |40.|40.|40.|40.|40.|40.|40.|40.|40.|100.|100.|100.|100.|100.|100.|100.|100.|100.|
cell_crystal_pitch_x = |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |
cell_crystal_pitch_y = |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |1.7 |
# Fibres Materials: 1) Quartz 2) SiO2:Ce 3) DSB:Ce 4) LuAG 5) YAG:Ce 6) GAGG:Ce:Mg 7) Water 8) GFAG
cell_crystal_material = |6|6|6|6|6|6|6|6|6|6|6|6|6|6|6|6|6|6|
#thickness of layer of air between hole and crystal [mm]
cell_air_layer = | 0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|0.1|
# depolishing of lateral and exit surfaces (comment out for no depolishing)
crystal_lateral_depolishing = 0.05
crystal_exit_depolishing    = 0.05

## STAGGERING
# elements can be simply aligned, or there can be a row staggering either in x or in y
# if left commented out, there is no row staggering
# cell_staggering        = |1|1|     # 0 = no, 1 = yes
# cell_staggering_axis   = |1|1|     # 0 = x, 1 = y
# cell_staggering_size   = |1|1|     # displacement in mm
# cell_staggering_parity = |1|1|     # 0 = even rows, 1 = odd rows
# cell_staggering_remove = |1|1|     # 1 = staggering means remove an element

## SEPARATION
# the absobers can be separated in two parts.
# the actual separation is an effect of the structure of cells defined above, anyway
# the user need to decide what is the optical separation.
# CAREFUL it is user's responsibility to place the saparation in the right position
# aking into account the definition of cells!!! On the other hand, its thickness
# will automatically be added to the z dimension of the absorber, and the cells
# move accordingly
# Type can be
# 0 = nothing (air)
# 1 = aluminization
# 2 = reflector (esr)
cell_separation_type = 2
cell_separator_position = -30. # in mm
esr_transmittance = 0              # probability for a optical photon to cross ESR - default = 0
separation_thickness = 1           # ignored if cell_separation_type != 2
separation_material  = 5           # ignored if cell_separation_type != 2
# separation_material has the same choices as absorber material (see above)
# In any case, if the absorber is split in two, there need to be a gap between crystals in z
# otherwise they would be in contact and effectively the same crystal for G4. The material of this
# sepation layer is decided here. The thikness is defined by cell_air_layer above
# 1 = air 2 = optical grease
# front is the negative z direction
cell_int_gap_material = |1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|


#####################
# USER SPECIFIC/ SPECIAL KEYS
#####################
# readoutType = 5           # readout type. 0) 1cm air + PMTs 1) test beam 2018 2) test beam 2019 3)  1cm air + 1 big PMT 4) 0.1 mm air + 1 big squared PMT 5) no readout (for hybrid simulation) - default = 5
# abs_length_scale_factor = 2.43       # multiply the abs length of the crystal material by a factor. Implemented only for GAGG:Ce:Mg and YAG:Ce! -default = 1
# user_lightyield = 10000
